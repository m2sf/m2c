%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%
%% M2C Modula-2 Compiler & Translator                                       %%  
%%                                                                          %%
%% Copyright (c) 2015-2023 Benjamin Kowarsch                                %%
%%                                                                          %%
%% @synopsis                                                                %%
%%                                                                          %%
%% M2C is a portable  Modula-2 to C translator  and via-C compiler  for the %%
%% bootstrap subset of the revised Modula-2 language described in           %%
%%                                                                          %%
%% https://github.com/m2sf/m2bsk/wiki/Language-Specification                %%
%%                                                                          %%
%% In translator mode, M2C translates Modula-2 source files to semantically %%
%% equivalent C source files.  In compiler mode, it translates the Modula-2 %%
%% source files  to C,  then compiles the resulting C sources to object and %%
%% executable files using the host system's resident C compiler and linker. %%
%%                                                                          %%
%% Further information at https://github.com/m2sf/m2c/wiki                  %%
%%                                                                          %%
%% @file                                                                    %%
%%                                                                          %%
%% c99-templates.tpl                                                        %%
%%                                                                          %%
%% Templates for generating C99 output.  (experimental)                     %%
%%                                                                          %%
%% @license                                                                 %%
%%                                                                          %%
%% M2C is free software: You can redistribute and modify it under the terms %%
%% of the GNU Lesser General Public License (LGPL) either version 2.1 or at %%
%% your choice version 3, both published by the Free Software Foundation.   %%
%%                                                                          %%
%% M2C is distributed in the hope it may be useful,  but  strictly  WITHOUT %%
%% ANY WARRANTY;  without even  the implied warranty of  MERCHANTABILITY or %%
%% FITNESS FOR ANY PARTICULAR PURPOSE.  Read the license for more details.  %%
%%                                                                          %%
%% You should have received a copy of the GNU Lesser General Public License %%
%% along with M2C.  If not, see <https://www.gnu.org/copyleft/lesser.html>. %%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %%

%% ---------------------------------------------------------------------------
%% File Preamble
%% ---------------------------------------------------------------------------

preamble {%
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// <%target_filename%>
//
// C99 source file, auto-generated by M2C Modula-2 Compiler & Translator
//
// Modula-2 source file details
//   filename : <%source_filename%>
//   module   : <%module_ident%>
//   key      : <%module_key%>
//
// For details on M2C, see https://github.com/m2sf/m2c
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
%}


%% ---------------------------------------------------------------------------
%% File End Marker
%% ---------------------------------------------------------------------------

eof {%
/* END OF FILE */
%}


%% ---------------------------------------------------------------------------
%% (INTERFACE moduleIdent impList defList)
%% ---------------------------------------------------------------------------

interface {%
<%preamble%>
<%incl_guard_start%>
<%imp-list%>
<%def-list%>
<%incl_guard_end%>
<%eof%>
%}


%% ---------------------------------------------------------------------------
%% (IMPLEMENTATION moduleIdent impList defList block)
%% ---------------------------------------------------------------------------

implementation {%
<%preamble%>
<%imp-list%>
<%def-list%>
<%block%>
<%eof%>
%}


%% ---------------------------------------------------------------------------
%% (PROGRAM moduleIdent impList defList block)
%% ---------------------------------------------------------------------------

program {%
<%preamble%>
<%imp-list%>
<%def-list%>
<%block%>
<%eof%>
%}


%% ---------------------------------------------------------------------------
%% (IMP-LIST import0 import1 import2 ... importN)
%% ---------------------------------------------------------------------------

imp-list {%
/* ---------------------------------------------------------------------------
 * imports
 * ------------------------------------------------------------------------ */

@foreach n <%n%>
%}


%% ---------------------------------------------------------------------------
%% (DEF-LIST definition0 definition1 definition2 ... definitionN)
%% ---------------------------------------------------------------------------

def-list {%
@foreach n <%n%>
%}


%% ---------------------------------------------------------------------------
%% (CONSTDEF ident expr)
%% ---------------------------------------------------------------------------

constdef {%
/* ---------------------------------------------------------------------------
 * constant <%0%>
 * ------------------------------------------------------------------------ */

#define <%0%> (<%1%>)
%}


%% ---------------------------------------------------------------------------
%% (TYPEDEF ident type)
%% ---------------------------------------------------------------------------

typedef {%
/* ---------------------------------------------------------------------------
 * type <%0%>
 * ------------------------------------------------------------------------ */

typedef <%1%> <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (VARDECL identList type)
%% ---------------------------------------------------------------------------

vardecl {%
/* ---------------------------------------------------------------------------
 * variable <%0%>
 * ------------------------------------------------------------------------ */

extern <%1%> <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (VARDEF identList type)
%% ---------------------------------------------------------------------------

vardef {%
/* ---------------------------------------------------------------------------
 * variable <%0%>
 * ------------------------------------------------------------------------ */

<%1%> <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (PROCDECL ident procSig)
%% ---------------------------------------------------------------------------

procdecl {%
/* ---------------------------------------------------------------------------
 * function <%0%>
 * ------------------------------------------------------------------------ */

<%1.1%> <%1.0%> <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (PROCDEF procDecl block)
%% ---------------------------------------------------------------------------

procdef {%
/* ---------------------------------------------------------------------------
 * function <%0.0%>
 * ------------------------------------------------------------------------ */

<%0%> <%1%>
%}


%% ---------------------------------------------------------------------------
%% (ALIAS ident typeIdent)
%% ---------------------------------------------------------------------------

alias {%
/* ---------------------------------------------------------------------------
 * alias type <%0%>
 * ------------------------------------------------------------------------ */

typedef <%1> <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (SUBR ident range typeIdent)
%% ---------------------------------------------------------------------------

subr {%
/* ---------------------------------------------------------------------------
 * subrange type <%0%>
 * ------------------------------------------------------------------------ */

typedef <%2> <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (ENUM ident identList)
%% ---------------------------------------------------------------------------

enum {%
/* ---------------------------------------------------------------------------
 * enumeration type <%0%>
 * ------------------------------------------------------------------------ */

typedef enum {
<%2>
} <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (SET ident enumTypeIdent)
%% ---------------------------------------------------------------------------

set {%
/* ---------------------------------------------------------------------------
 * set type <%0%>
 * ------------------------------------------------------------------------ */

typedef struct {
  long long unsigned seg0;
  long long unsigned seg1;
} <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (ARRAY ident capacity valueTypeIdent)
%% ---------------------------------------------------------------------------

array {%
/* ---------------------------------------------------------------------------
 * array type <%0%>
 * ------------------------------------------------------------------------ */

typedef struct {
  long long unsigned size;
  long long unsigned count;
  <%2> value[<%1.0%>];
} <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (RECORD ident baseType fieldListSeq)
%% ---------------------------------------------------------------------------

record {%
/* ---------------------------------------------------------------------------
 * record type <%0%>
 * ------------------------------------------------------------------------ */

typedef struct {
  <%2%>
} <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (OPAQUE ident allocSize)
%% ---------------------------------------------------------------------------

opaque {%
/* ---------------------------------------------------------------------------
 * opaque type <%0%>
 * ------------------------------------------------------------------------ */

typedef <%0%>_hidden <%0%>;
%}


%% ---------------------------------------------------------------------------
%% (POINTER ident targetTypeIdent)
%% ---------------------------------------------------------------------------

pointer {%
/* ---------------------------------------------------------------------------
 * pointer type <%0%>
 * ------------------------------------------------------------------------ */

typedef <%1%> *<%0%>;
%}


%% ---------------------------------------------------------------------------
%% (PROCTYPE ident formalTypeList returnTypeIdent)
%% ---------------------------------------------------------------------------

proctype {%
/* ---------------------------------------------------------------------------
 * function type <%0%>
 * ------------------------------------------------------------------------ */

typedef <%2%> (<%0%>) (<%1%>);
%}


